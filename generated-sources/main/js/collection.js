/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.model.Collection');

goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Collection.repeatedFields_, null);
};
goog.inherits(proto.model.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.model.Collection.displayName = 'proto.model.Collection';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Collection.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Collection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.model.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    name: msg.getName(),
    description: msg.getDescription(),
    createdTsMicros: msg.getCreatedTsMicros(),
    subscriberIdsList: jspb.Message.getField(msg, 5),
    itemsList: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.model.Collection} The clone.
 */
proto.model.Collection.prototype.cloneMessage = function() {
  return /** @type {!proto.model.Collection} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.model.Collection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.model.Collection.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.model.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.model.Collection.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.model.Collection.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.model.Collection.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 created_ts_micros = 4;
 * @return {number}
 */
proto.model.Collection.prototype.getCreatedTsMicros = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.model.Collection.prototype.setCreatedTsMicros = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated string subscriber_ids = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.model.Collection.prototype.getSubscriberIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 5));
};


/** @param {Array.<string>} value  */
proto.model.Collection.prototype.setSubscriberIdsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


proto.model.Collection.prototype.clearSubscriberIdsList = function() {
  jspb.Message.setField(this, 5, []);
};


/**
 * repeated string items = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.model.Collection.prototype.getItemsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 6));
};


/** @param {Array.<string>} value  */
proto.model.Collection.prototype.setItemsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


proto.model.Collection.prototype.clearItemsList = function() {
  jspb.Message.setField(this, 6, []);
};


