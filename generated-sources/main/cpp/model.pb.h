// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace model {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class Collection;
class Item;
class User;

// ===================================================================

class Collection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:model.Collection) */ {
 public:
  Collection();
  virtual ~Collection();

  Collection(const Collection& from);

  inline Collection& operator=(const Collection& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Collection& default_instance();

  void Swap(Collection* other);

  // implements Message ----------------------------------------------

  inline Collection* New() const { return New(NULL); }

  Collection* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Collection& from);
  void MergeFrom(const Collection& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Collection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional int64 created_ts_micros = 4;
  void clear_created_ts_micros();
  static const int kCreatedTsMicrosFieldNumber = 4;
  ::google::protobuf::int64 created_ts_micros() const;
  void set_created_ts_micros(::google::protobuf::int64 value);

  // repeated string subscriber_ids = 5;
  int subscriber_ids_size() const;
  void clear_subscriber_ids();
  static const int kSubscriberIdsFieldNumber = 5;
  const ::std::string& subscriber_ids(int index) const;
  ::std::string* mutable_subscriber_ids(int index);
  void set_subscriber_ids(int index, const ::std::string& value);
  void set_subscriber_ids(int index, const char* value);
  void set_subscriber_ids(int index, const char* value, size_t size);
  ::std::string* add_subscriber_ids();
  void add_subscriber_ids(const ::std::string& value);
  void add_subscriber_ids(const char* value);
  void add_subscriber_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subscriber_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subscriber_ids();

  // repeated string items = 6;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 6;
  const ::std::string& items(int index) const;
  ::std::string* mutable_items(int index);
  void set_items(int index, const ::std::string& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  ::std::string* add_items();
  void add_items(const ::std::string& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& items() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_items();

  // @@protoc_insertion_point(class_scope:model.Collection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::int64 created_ts_micros_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subscriber_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> items_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Collection* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:model.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  inline User* New() const { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:model.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:model.Item) */ {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  inline Item* New() const { return New(NULL); }

  Item* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string url = 2;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // optional int64 created_ts_micros = 3;
  void clear_created_ts_micros();
  static const int kCreatedTsMicrosFieldNumber = 3;
  ::google::protobuf::int64 created_ts_micros() const;
  void set_created_ts_micros(::google::protobuf::int64 value);

  // optional string author_id = 4;
  void clear_author_id();
  static const int kAuthorIdFieldNumber = 4;
  const ::std::string& author_id() const;
  void set_author_id(const ::std::string& value);
  void set_author_id(const char* value);
  void set_author_id(const char* value, size_t size);
  ::std::string* mutable_author_id();
  ::std::string* release_author_id();
  void set_allocated_author_id(::std::string* author_id);

  // @@protoc_insertion_point(class_scope:model.Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 created_ts_micros_;
  ::google::protobuf::internal::ArenaStringPtr author_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Collection

// optional string id = 1;
inline void Collection::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Collection::id() const {
  // @@protoc_insertion_point(field_get:model.Collection.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Collection.id)
}
inline void Collection::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Collection.id)
}
inline void Collection::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Collection.id)
}
inline ::std::string* Collection::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:model.Collection.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Collection::release_id() {
  // @@protoc_insertion_point(field_release:model.Collection.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:model.Collection.id)
}

// optional string name = 2;
inline void Collection::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Collection::name() const {
  // @@protoc_insertion_point(field_get:model.Collection.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Collection.name)
}
inline void Collection::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Collection.name)
}
inline void Collection::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Collection.name)
}
inline ::std::string* Collection::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:model.Collection.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Collection::release_name() {
  // @@protoc_insertion_point(field_release:model.Collection.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:model.Collection.name)
}

// optional string description = 3;
inline void Collection::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Collection::description() const {
  // @@protoc_insertion_point(field_get:model.Collection.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Collection.description)
}
inline void Collection::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Collection.description)
}
inline void Collection::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Collection.description)
}
inline ::std::string* Collection::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:model.Collection.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Collection::release_description() {
  // @@protoc_insertion_point(field_release:model.Collection.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Collection::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:model.Collection.description)
}

// optional int64 created_ts_micros = 4;
inline void Collection::clear_created_ts_micros() {
  created_ts_micros_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Collection::created_ts_micros() const {
  // @@protoc_insertion_point(field_get:model.Collection.created_ts_micros)
  return created_ts_micros_;
}
inline void Collection::set_created_ts_micros(::google::protobuf::int64 value) {
  
  created_ts_micros_ = value;
  // @@protoc_insertion_point(field_set:model.Collection.created_ts_micros)
}

// repeated string subscriber_ids = 5;
inline int Collection::subscriber_ids_size() const {
  return subscriber_ids_.size();
}
inline void Collection::clear_subscriber_ids() {
  subscriber_ids_.Clear();
}
inline const ::std::string& Collection::subscriber_ids(int index) const {
  // @@protoc_insertion_point(field_get:model.Collection.subscriber_ids)
  return subscriber_ids_.Get(index);
}
inline ::std::string* Collection::mutable_subscriber_ids(int index) {
  // @@protoc_insertion_point(field_mutable:model.Collection.subscriber_ids)
  return subscriber_ids_.Mutable(index);
}
inline void Collection::set_subscriber_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:model.Collection.subscriber_ids)
  subscriber_ids_.Mutable(index)->assign(value);
}
inline void Collection::set_subscriber_ids(int index, const char* value) {
  subscriber_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:model.Collection.subscriber_ids)
}
inline void Collection::set_subscriber_ids(int index, const char* value, size_t size) {
  subscriber_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:model.Collection.subscriber_ids)
}
inline ::std::string* Collection::add_subscriber_ids() {
  // @@protoc_insertion_point(field_add_mutable:model.Collection.subscriber_ids)
  return subscriber_ids_.Add();
}
inline void Collection::add_subscriber_ids(const ::std::string& value) {
  subscriber_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:model.Collection.subscriber_ids)
}
inline void Collection::add_subscriber_ids(const char* value) {
  subscriber_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:model.Collection.subscriber_ids)
}
inline void Collection::add_subscriber_ids(const char* value, size_t size) {
  subscriber_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:model.Collection.subscriber_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Collection::subscriber_ids() const {
  // @@protoc_insertion_point(field_list:model.Collection.subscriber_ids)
  return subscriber_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Collection::mutable_subscriber_ids() {
  // @@protoc_insertion_point(field_mutable_list:model.Collection.subscriber_ids)
  return &subscriber_ids_;
}

// repeated string items = 6;
inline int Collection::items_size() const {
  return items_.size();
}
inline void Collection::clear_items() {
  items_.Clear();
}
inline const ::std::string& Collection::items(int index) const {
  // @@protoc_insertion_point(field_get:model.Collection.items)
  return items_.Get(index);
}
inline ::std::string* Collection::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:model.Collection.items)
  return items_.Mutable(index);
}
inline void Collection::set_items(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:model.Collection.items)
  items_.Mutable(index)->assign(value);
}
inline void Collection::set_items(int index, const char* value) {
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:model.Collection.items)
}
inline void Collection::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:model.Collection.items)
}
inline ::std::string* Collection::add_items() {
  // @@protoc_insertion_point(field_add_mutable:model.Collection.items)
  return items_.Add();
}
inline void Collection::add_items(const ::std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:model.Collection.items)
}
inline void Collection::add_items(const char* value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:model.Collection.items)
}
inline void Collection::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:model.Collection.items)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Collection::items() const {
  // @@protoc_insertion_point(field_list:model.Collection.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Collection::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:model.Collection.items)
  return &items_;
}

// -------------------------------------------------------------------

// User

// optional string id = 1;
inline void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:model.User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.User.id)
}
inline void User::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.User.id)
}
inline void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.User.id)
}
inline ::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:model.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:model.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:model.User.id)
}

// -------------------------------------------------------------------

// Item

// optional string id = 1;
inline void Item::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::id() const {
  // @@protoc_insertion_point(field_get:model.Item.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Item.id)
}
inline void Item::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Item.id)
}
inline void Item::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Item.id)
}
inline ::std::string* Item::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:model.Item.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_id() {
  // @@protoc_insertion_point(field_release:model.Item.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:model.Item.id)
}

// optional string url = 2;
inline void Item::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::url() const {
  // @@protoc_insertion_point(field_get:model.Item.url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Item.url)
}
inline void Item::set_url(const char* value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Item.url)
}
inline void Item::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Item.url)
}
inline ::std::string* Item::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:model.Item.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_url() {
  // @@protoc_insertion_point(field_release:model.Item.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:model.Item.url)
}

// optional int64 created_ts_micros = 3;
inline void Item::clear_created_ts_micros() {
  created_ts_micros_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Item::created_ts_micros() const {
  // @@protoc_insertion_point(field_get:model.Item.created_ts_micros)
  return created_ts_micros_;
}
inline void Item::set_created_ts_micros(::google::protobuf::int64 value) {
  
  created_ts_micros_ = value;
  // @@protoc_insertion_point(field_set:model.Item.created_ts_micros)
}

// optional string author_id = 4;
inline void Item::clear_author_id() {
  author_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Item::author_id() const {
  // @@protoc_insertion_point(field_get:model.Item.author_id)
  return author_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_author_id(const ::std::string& value) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:model.Item.author_id)
}
inline void Item::set_author_id(const char* value) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:model.Item.author_id)
}
inline void Item::set_author_id(const char* value, size_t size) {
  
  author_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:model.Item.author_id)
}
inline ::std::string* Item::mutable_author_id() {
  
  // @@protoc_insertion_point(field_mutable:model.Item.author_id)
  return author_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Item::release_author_id() {
  // @@protoc_insertion_point(field_release:model.Item.author_id)
  
  return author_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Item::set_allocated_author_id(::std::string* author_id) {
  if (author_id != NULL) {
    
  } else {
    
  }
  author_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author_id);
  // @@protoc_insertion_point(field_set_allocated:model.Item.author_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
